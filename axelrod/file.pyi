import collections
import typing
from typing import Any, Dict, List, Set, Tuple, Type, Union

Counter = ...  # type: Type[collections.Counter]
DeterministicCache = ...  # type: Any
Match = ...  # type: Any
np = ...  # type: Any
random = ...  # type: module
randrange = ...  # type: Any

def fitness_proportionate_selection(scores) -> Any: ...

class MoranProcess(object):
    deterministic_cache = ...  # type: Any
    initial_players = ...  # type: Any
    mode = ...  # type: Any
    mutation_rate = ...  # type: Any
    mutation_targets = ...  # type: Dict[str, list]
    noise = ...  # type: Any
    players = ...  # type: list
    populations = ...  # type: List[collections.Counter]
    score_history = ...  # type: List[list]
    turns = ...  # type: Any
    winning_strategy_name = ...  # type: Union[None, str]
    def __init__(self, players, turns = ..., noise = ..., deterministic_cache = ..., mutation_rate = ..., mode: Union[bytearray, unicode] = ..., match_class: typing.Callable = ...) -> None: ...
    def __iter__(self) -> MoranProcess: ...
    def __len__(self) -> int: ...
    def __next__(self) -> MoranProcess: ...
    def _matchup_indices(self) -> List[Tuple[int, ...]]: ...
    def birth(self, index = ...) -> Any: ...
    def death(self, index = ...) -> Any: ...
    def fixation_check(self) -> bool: ...
    def match_class(self, _1: tuple) -> Any: ...
    def mutate(self, index) -> Any: ...
    def play(self) -> Any: ...
    def population_distribution(self) -> collections.Counter: ...
    def reset(self) -> None: ...
    def score_all(self) -> list: ...
    def set_players(self) -> None: ...

class MoranProcessGraph(MoranProcess):
    dead = ...  # type: Any
    index = ...  # type: dict
    interaction_graph = ...  # type: Any
    locations = ...  # type: list
    reproduction_graph = ...  # type: Any
    def __init__(self, players, interaction_graph, reproduction_graph = ..., turns = ..., noise = ..., deterministic_cache = ..., mutation_rate = ..., mode = ..., match_class = ...) -> None: ...
    def _matchup_indices(self) -> Set[tuple]: ...
    def birth(self, index = ...) -> Any: ...
    def death(self, index = ...) -> Any: ...
